import { makeAutoObservable, runInAction } from 'mobx';
import type { IAchievement, IUser } from '../types/UserTypes';

/**
 * @class UserStore
 * @description –•—Ä–∞–Ω–∏–ª–∏—â–µ MobX –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.
 */
class UserStore {
  /**
   * @property {IUser | null} user - –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
   */
  user: IUser | null = null;
  /**
   * @property {boolean} isLoading - –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∏–¥–µ—Ç –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö.
   */
  isLoading: boolean = false;
  /**
   * @property {string | null} error - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞.
   */
  error: string | null = null;

  constructor() {
    makeAutoObservable(this);
  }

  /**
   * @method fetchUser
   * @description –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò–º–∏—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API.
   * @param {string} userId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.
   * @returns {Promise<void>}
   */
  async fetchUser(userId: string): Promise<void> {
    this.isLoading = true;
    this.error = null;
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      const mockAchievements: IAchievement[] = [
        { id: '1', name: '–ü–µ—Ä–≤—ã–π —à–∞–≥', description: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', icon: '‚≠ê' },
        { id: '2', name: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', icon: 'üîç' },
        { id: '3', name: '–°–æ–±–∏—Ä–∞—Ç–µ–ª—å', description: '–ü–æ–ª—É—á–∏—Ç—å 5 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π', icon: 'üèÜ' },
      ];

      const mockUser: IUser = {
        id: userId,
        username: '–¢–µ—Å—Ç–æ–≤—ã–π–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        email: 'test@example.com',
        avatarUrl: 'https://i.pravatar.cc/150?img=3',
        achievements: mockAchievements,
      };

      runInAction(() => {
        this.user = mockUser;
        this.isLoading = false;
      });
    } catch (error: any) {
      runInAction(() => {
        this.error = error.message;
        this.isLoading = false;
      });
    }
  }

  /**
   * @method updateUsername
   * @description –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * @param {string} newUsername - –ù–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * @returns {Promise<void>}
   */
  async updateUsername(newUsername: string): Promise<void> {
    this.isLoading = true;
    this.error = null;
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      await new Promise((resolve) => setTimeout(resolve, 500));

      runInAction(() => {
        if (this.user) {
          this.user.username = newUsername;
        }
        this.isLoading = false;
      });
    } catch (error: any) {
      runInAction(() => {
        this.error = error.message;
        this.isLoading = false;
      });
    }
  }
}

export const userStore = new UserStore();
